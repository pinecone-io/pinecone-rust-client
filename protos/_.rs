// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SparseValues {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub indices: ::prost::alloc::vec::Vec<u32>,
    #[prost(float, repeated, packed = "false", tag = "2")]
    pub values: ::prost::alloc::vec::Vec<f32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vector {
    /// This is the vector's unique id.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// This is the vector data included in the request.
    #[prost(float, repeated, packed = "false", tag = "2")]
    pub values: ::prost::alloc::vec::Vec<f32>,
    #[prost(message, optional, tag = "4")]
    pub sparse_values: ::core::option::Option<SparseValues>,
    /// This is the metadata included in the request.
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScoredVector {
    /// This is the vector's unique id.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// This is a measure of similarity between this vector and the query vector.  The higher the score, the more they are similar.
    #[prost(float, tag = "2")]
    pub score: f32,
    /// This is the vector data, if it is requested.
    #[prost(float, repeated, tag = "3")]
    pub values: ::prost::alloc::vec::Vec<f32>,
    /// This is the sparse data, if it is requested.
    #[prost(message, optional, tag = "5")]
    pub sparse_values: ::core::option::Option<SparseValues>,
    /// This is the metadata, if it is requested.
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
/// This is a container to hold mutating vector requests. This is not actually used
/// in any public APIs.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestUnion {
    #[prost(oneof = "request_union::RequestUnionInner", tags = "1, 2, 3")]
    pub request_union_inner: ::core::option::Option<request_union::RequestUnionInner>,
}
/// Nested message and enum types in `RequestUnion`.
pub mod request_union {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum RequestUnionInner {
        #[prost(message, tag = "1")]
        Upsert(super::UpsertRequest),
        #[prost(message, tag = "2")]
        Delete(super::DeleteRequest),
        #[prost(message, tag = "3")]
        Update(super::UpdateRequest),
    }
}
/// The request for the `upsert` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpsertRequest {
    /// An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
    #[prost(message, repeated, tag = "1")]
    pub vectors: ::prost::alloc::vec::Vec<Vector>,
    /// The namespace where you upsert vectors.
    #[prost(string, tag = "2")]
    pub namespace: ::prost::alloc::string::String,
}
/// The response for the `upsert` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpsertResponse {
    /// The number of vectors upserted.
    #[prost(uint32, tag = "1")]
    pub upserted_count: u32,
}
/// The request for the `Delete` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRequest {
    /// Vectors to delete.
    #[prost(string, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// This indicates that all vectors in the index namespace should be deleted.
    #[prost(bool, tag = "2")]
    pub delete_all: bool,
    /// The namespace to delete vectors from, if applicable.
    #[prost(string, tag = "3")]
    pub namespace: ::prost::alloc::string::String,
    /// If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive
    /// with specifying ids to delete in the ids param or using `delete_all=True`.
    /// For guidance and examples, see [Filter with metadata](<https://docs.pinecone.io/guides/data/filter-with-metadata>).
    /// Serverless indexes do not support delete by metadata. Instead, you can use the `list` operation to fetch the vector IDs based on their common ID prefix and then delete the records by ID.
    #[prost(message, optional, tag = "4")]
    pub filter: ::core::option::Option<::prost_types::Struct>,
}
/// The response for the `Delete` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteResponse {}
/// The request for the `fetch` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchRequest {
    /// The vector IDs to fetch. Does not accept values containing spaces.
    #[prost(string, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub namespace: ::prost::alloc::string::String,
}
/// The response for the `fetch` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchResponse {
    /// The fetched vectors, in the form of a map between the fetched ids and the fetched vectors
    #[prost(map = "string, message", tag = "1")]
    pub vectors: ::std::collections::HashMap<::prost::alloc::string::String, Vector>,
    /// The namespace of the vectors.
    #[prost(string, tag = "2")]
    pub namespace: ::prost::alloc::string::String,
    ///   The usage for this operation.
    #[prost(message, optional, tag = "3")]
    pub usage: ::core::option::Option<Usage>,
}
/// The request for the `List` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRequest {
    /// The vector IDs to fetch. Does not accept values containing spaces.
    #[prost(string, optional, tag = "1")]
    pub prefix: ::core::option::Option<::prost::alloc::string::String>,
    /// Max number of ids to return
    #[prost(uint32, optional, tag = "2")]
    pub limit: ::core::option::Option<u32>,
    /// Pagination token to continue a previous listing operation
    #[prost(string, optional, tag = "3")]
    pub pagination_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub namespace: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pagination {
    #[prost(string, tag = "1")]
    pub next: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListItem {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
/// The response for the `List` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListResponse {
    /// A list of ids
    #[prost(message, repeated, tag = "1")]
    pub vectors: ::prost::alloc::vec::Vec<ListItem>,
    /// Pagination token to continue past this listing
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<Pagination>,
    /// The namespace of the vectors.
    #[prost(string, tag = "3")]
    pub namespace: ::prost::alloc::string::String,
    ///   The usage for this operation.
    #[prost(message, optional, tag = "4")]
    pub usage: ::core::option::Option<Usage>,
}
/// A single query vector within a `QueryRequest`.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVector {
    /// The query vector values. This should be the same length as the dimension of the index being queried.
    #[prost(float, repeated, packed = "false", tag = "1")]
    pub values: ::prost::alloc::vec::Vec<f32>,
    /// The query sparse values.
    #[prost(message, optional, tag = "5")]
    pub sparse_values: ::core::option::Option<SparseValues>,
    /// An override for the number of results to return for this query vector.
    #[prost(uint32, tag = "2")]
    pub top_k: u32,
    /// An override the namespace to search.
    #[prost(string, tag = "3")]
    pub namespace: ::prost::alloc::string::String,
    /// An override for the metadata filter to apply. This replaces the request-level filter.
    #[prost(message, optional, tag = "4")]
    pub filter: ::core::option::Option<::prost_types::Struct>,
}
/// The request for the `query` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRequest {
    /// The namespace to query.
    #[prost(string, tag = "1")]
    pub namespace: ::prost::alloc::string::String,
    /// The number of results to return for each query.
    #[prost(uint32, tag = "2")]
    pub top_k: u32,
    /// The filter to apply. You can use vector metadata to limit your search. See [Filter with metadata](<https://docs.pinecone.io/guides/data/filter-with-metadata>).
    #[prost(message, optional, tag = "3")]
    pub filter: ::core::option::Option<::prost_types::Struct>,
    /// Indicates whether vector values are included in the response.
    #[prost(bool, tag = "4")]
    pub include_values: bool,
    /// Indicates whether metadata is included in the response as well as the ids.
    #[prost(bool, tag = "5")]
    pub include_metadata: bool,
    /// DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
    #[deprecated]
    #[prost(message, repeated, tag = "6")]
    pub queries: ::prost::alloc::vec::Vec<QueryVector>,
    /// The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
    #[prost(float, repeated, tag = "7")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    /// The query sparse values.
    #[prost(message, optional, tag = "9")]
    pub sparse_vector: ::core::option::Option<SparseValues>,
    /// The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
    #[prost(string, tag = "8")]
    pub id: ::prost::alloc::string::String,
}
/// The query results for a single `QueryVector`
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SingleQueryResults {
    /// The matches for the vectors.
    #[prost(message, repeated, tag = "1")]
    pub matches: ::prost::alloc::vec::Vec<ScoredVector>,
    /// The namespace for the vectors.
    #[prost(string, tag = "2")]
    pub namespace: ::prost::alloc::string::String,
}
/// The response for the `query` operation. These are the matches found for a particular query vector. The matches are ordered from most similar to least similar.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryResponse {
    /// DEPRECATED. The results of each query. The order is the same as `QueryRequest.queries`.
    #[deprecated]
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<SingleQueryResults>,
    /// The matches for the vectors.
    #[prost(message, repeated, tag = "2")]
    pub matches: ::prost::alloc::vec::Vec<ScoredVector>,
    /// The namespace for the vectors.
    #[prost(string, tag = "3")]
    pub namespace: ::prost::alloc::string::String,
    /// The usage for this operation.
    #[prost(message, optional, tag = "4")]
    pub usage: ::core::option::Option<Usage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Usage {
    /// The number of read units consumed by this operation.
    #[prost(uint32, optional, tag = "1")]
    pub read_units: ::core::option::Option<u32>,
}
/// The request for the `update` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRequest {
    /// Vector's unique id.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Vector data.
    #[prost(float, repeated, tag = "2")]
    pub values: ::prost::alloc::vec::Vec<f32>,
    #[prost(message, optional, tag = "5")]
    pub sparse_values: ::core::option::Option<SparseValues>,
    /// Metadata to set for the vector.
    #[prost(message, optional, tag = "3")]
    pub set_metadata: ::core::option::Option<::prost_types::Struct>,
    /// The namespace containing the vector to update.
    #[prost(string, tag = "4")]
    pub namespace: ::prost::alloc::string::String,
}
/// The response for the `update` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateResponse {}
/// The request for the `describe_index_stats` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DescribeIndexStatsRequest {
    /// If this parameter is present, the operation only returns statistics
    /// for vectors that satisfy the filter.
    /// See <https://docs.pinecone.io/guides/data/filtering-with-metadata.>
    #[prost(message, optional, tag = "1")]
    pub filter: ::core::option::Option<::prost_types::Struct>,
}
/// A summary of the contents of a namespace.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NamespaceSummary {
    /// The number of vectors stored in this namespace. Note that updates to this field may lag behind updates to the
    /// underlying index and corresponding query results, etc.
    #[prost(uint32, tag = "1")]
    pub vector_count: u32,
}
/// The response for the `describe_index_stats` operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DescribeIndexStatsResponse {
    /// A mapping for each namespace in the index from the namespace name to a
    /// summary of its contents. If a metadata filter expression is present, the
    /// summary will reflect only vectors matching that expression.
    #[prost(map = "string, message", tag = "1")]
    pub namespaces: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        NamespaceSummary,
    >,
    /// The dimension of the indexed vectors.
    #[prost(uint32, tag = "2")]
    pub dimension: u32,
    /// The fullness of the index, regardless of whether a metadata filter expression was passed. The granularity of this metric is 10%.
    ///
    /// Serverless indexes scale automatically as needed, so index fullness is relevant only for pod-based indexes.
    ///
    /// The index fullness result may be inaccurate during pod resizing; to get the status of a pod resizing process, use [`describe_index`](<https://docs.pinecone.io/reference/api/control-plane/describe_index>).
    #[prost(float, tag = "3")]
    pub index_fullness: f32,
    /// The total number of vectors in the index, regardless of whether a metadata filter expression was passed
    #[prost(uint32, tag = "4")]
    pub total_vector_count: u32,
}
/// Generated client implementations.
pub mod vector_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// The `VectorService` interface is exposed by Pinecone's vector index services.
    /// This service could also be called a `gRPC` service or a `REST`-like api.
    #[derive(Debug, Clone)]
    pub struct VectorServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl VectorServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> VectorServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> VectorServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            VectorServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Upsert vectors
        ///
        /// The `upsert` operation writes vectors into a namespace. If a new value is upserted for an existing vector ID, it will overwrite the previous value.
        ///
        /// For guidance and examples, see [Upsert data](https://docs.pinecone.io/guides/data/upsert-data).
        pub async fn upsert(
            &mut self,
            request: impl tonic::IntoRequest<super::UpsertRequest>,
        ) -> std::result::Result<tonic::Response<super::UpsertResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/VectorService/Upsert");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("VectorService", "Upsert"));
            self.inner.unary(req, path, codec).await
        }
        /// Delete vectors
        ///
        /// The `delete` operation deletes vectors, by id, from a single namespace.
        ///
        /// For guidance and examples, see [Delete data](https://docs.pinecone.io/guides/data/delete-data).
        pub async fn delete(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/VectorService/Delete");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("VectorService", "Delete"));
            self.inner.unary(req, path, codec).await
        }
        /// Fetch vectors
        ///
        /// The `fetch` operation looks up and returns vectors, by ID, from a single namespace. The returned vectors include the vector data and/or metadata.
        ///
        /// For guidance and examples, see [Fetch data](https://docs.pinecone.io/guides/data/fetch-data).
        pub async fn fetch(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchRequest>,
        ) -> std::result::Result<tonic::Response<super::FetchResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/VectorService/Fetch");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("VectorService", "Fetch"));
            self.inner.unary(req, path, codec).await
        }
        /// List vector IDs
        ///
        /// The `list` operation lists the IDs of vectors in a single namespace of a serverless index. An optional prefix can be passed to limit the results to IDs with a common prefix.
        ///
        /// `list` returns up to 100 IDs at a time by default in sorted order (bitwise/"C" collation). If the `limit` parameter is set, `list` returns up to that number of IDs instead. Whenever there are additional IDs to return, the response also includes a `pagination_token` that you can use to get the next batch of IDs. When the response does not include a `pagination_token`, there are no more IDs to return.
        ///
        /// For guidance and examples, see [List record IDs](https://docs.pinecone.io/guides/data/list-record-ids).
        ///
        /// **Note:** `list` is supported only for serverless indexes.
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRequest>,
        ) -> std::result::Result<tonic::Response<super::ListResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/VectorService/List");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("VectorService", "List"));
            self.inner.unary(req, path, codec).await
        }
        /// Query vectors
        ///
        /// The `query` operation searches a namespace, using a query vector. It retrieves the ids of the most similar items in a namespace, along with their similarity scores.
        ///
        /// For guidance and examples, see [Query data](https://docs.pinecone.io/guides/data/query-data).
        pub async fn query(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/VectorService/Query");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("VectorService", "Query"));
            self.inner.unary(req, path, codec).await
        }
        /// Update a vector
        ///
        /// The `update` operation updates a vector in a namespace. If a value is included, it will overwrite the previous value. If a `set_metadata` is included, the values of the fields specified in it will be added or overwrite the previous value.
        ///
        /// For guidance and examples, see [Update data](https://docs.pinecone.io/guides/data/update-data).
        pub async fn update(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/VectorService/Update");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("VectorService", "Update"));
            self.inner.unary(req, path, codec).await
        }
        /// Get index stats
        ///
        /// The `describe_index_stats` operation returns statistics about the contents of an index, including the vector count per namespace, the number of dimensions, and the index fullness.
        ///
        /// Serverless indexes scale automatically as needed, so index fullness is relevant only for pod-based indexes.
        ///
        /// For pod-based indexes, the index fullness result may be inaccurate during pod resizing; to get the status of a pod resizing process, use [`describe_index`](https://docs.pinecone.io/reference/api/control-plane/describe_index).
        pub async fn describe_index_stats(
            &mut self,
            request: impl tonic::IntoRequest<super::DescribeIndexStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DescribeIndexStatsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/VectorService/DescribeIndexStats",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("VectorService", "DescribeIndexStats"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod vector_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with VectorServiceServer.
    #[async_trait]
    pub trait VectorService: Send + Sync + 'static {
        /// Upsert vectors
        ///
        /// The `upsert` operation writes vectors into a namespace. If a new value is upserted for an existing vector ID, it will overwrite the previous value.
        ///
        /// For guidance and examples, see [Upsert data](https://docs.pinecone.io/guides/data/upsert-data).
        async fn upsert(
            &self,
            request: tonic::Request<super::UpsertRequest>,
        ) -> std::result::Result<tonic::Response<super::UpsertResponse>, tonic::Status>;
        /// Delete vectors
        ///
        /// The `delete` operation deletes vectors, by id, from a single namespace.
        ///
        /// For guidance and examples, see [Delete data](https://docs.pinecone.io/guides/data/delete-data).
        async fn delete(
            &self,
            request: tonic::Request<super::DeleteRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteResponse>, tonic::Status>;
        /// Fetch vectors
        ///
        /// The `fetch` operation looks up and returns vectors, by ID, from a single namespace. The returned vectors include the vector data and/or metadata.
        ///
        /// For guidance and examples, see [Fetch data](https://docs.pinecone.io/guides/data/fetch-data).
        async fn fetch(
            &self,
            request: tonic::Request<super::FetchRequest>,
        ) -> std::result::Result<tonic::Response<super::FetchResponse>, tonic::Status>;
        /// List vector IDs
        ///
        /// The `list` operation lists the IDs of vectors in a single namespace of a serverless index. An optional prefix can be passed to limit the results to IDs with a common prefix.
        ///
        /// `list` returns up to 100 IDs at a time by default in sorted order (bitwise/"C" collation). If the `limit` parameter is set, `list` returns up to that number of IDs instead. Whenever there are additional IDs to return, the response also includes a `pagination_token` that you can use to get the next batch of IDs. When the response does not include a `pagination_token`, there are no more IDs to return.
        ///
        /// For guidance and examples, see [List record IDs](https://docs.pinecone.io/guides/data/list-record-ids).
        ///
        /// **Note:** `list` is supported only for serverless indexes.
        async fn list(
            &self,
            request: tonic::Request<super::ListRequest>,
        ) -> std::result::Result<tonic::Response<super::ListResponse>, tonic::Status>;
        /// Query vectors
        ///
        /// The `query` operation searches a namespace, using a query vector. It retrieves the ids of the most similar items in a namespace, along with their similarity scores.
        ///
        /// For guidance and examples, see [Query data](https://docs.pinecone.io/guides/data/query-data).
        async fn query(
            &self,
            request: tonic::Request<super::QueryRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryResponse>, tonic::Status>;
        /// Update a vector
        ///
        /// The `update` operation updates a vector in a namespace. If a value is included, it will overwrite the previous value. If a `set_metadata` is included, the values of the fields specified in it will be added or overwrite the previous value.
        ///
        /// For guidance and examples, see [Update data](https://docs.pinecone.io/guides/data/update-data).
        async fn update(
            &self,
            request: tonic::Request<super::UpdateRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateResponse>, tonic::Status>;
        /// Get index stats
        ///
        /// The `describe_index_stats` operation returns statistics about the contents of an index, including the vector count per namespace, the number of dimensions, and the index fullness.
        ///
        /// Serverless indexes scale automatically as needed, so index fullness is relevant only for pod-based indexes.
        ///
        /// For pod-based indexes, the index fullness result may be inaccurate during pod resizing; to get the status of a pod resizing process, use [`describe_index`](https://docs.pinecone.io/reference/api/control-plane/describe_index).
        async fn describe_index_stats(
            &self,
            request: tonic::Request<super::DescribeIndexStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DescribeIndexStatsResponse>,
            tonic::Status,
        >;
    }
    /// The `VectorService` interface is exposed by Pinecone's vector index services.
    /// This service could also be called a `gRPC` service or a `REST`-like api.
    #[derive(Debug)]
    pub struct VectorServiceServer<T: VectorService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: VectorService> VectorServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for VectorServiceServer<T>
    where
        T: VectorService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/VectorService/Upsert" => {
                    #[allow(non_camel_case_types)]
                    struct UpsertSvc<T: VectorService>(pub Arc<T>);
                    impl<
                        T: VectorService,
                    > tonic::server::UnaryService<super::UpsertRequest>
                    for UpsertSvc<T> {
                        type Response = super::UpsertResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpsertRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorService>::upsert(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpsertSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/VectorService/Delete" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteSvc<T: VectorService>(pub Arc<T>);
                    impl<
                        T: VectorService,
                    > tonic::server::UnaryService<super::DeleteRequest>
                    for DeleteSvc<T> {
                        type Response = super::DeleteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorService>::delete(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/VectorService/Fetch" => {
                    #[allow(non_camel_case_types)]
                    struct FetchSvc<T: VectorService>(pub Arc<T>);
                    impl<
                        T: VectorService,
                    > tonic::server::UnaryService<super::FetchRequest> for FetchSvc<T> {
                        type Response = super::FetchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorService>::fetch(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = FetchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/VectorService/List" => {
                    #[allow(non_camel_case_types)]
                    struct ListSvc<T: VectorService>(pub Arc<T>);
                    impl<
                        T: VectorService,
                    > tonic::server::UnaryService<super::ListRequest> for ListSvc<T> {
                        type Response = super::ListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorService>::list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/VectorService/Query" => {
                    #[allow(non_camel_case_types)]
                    struct QuerySvc<T: VectorService>(pub Arc<T>);
                    impl<
                        T: VectorService,
                    > tonic::server::UnaryService<super::QueryRequest> for QuerySvc<T> {
                        type Response = super::QueryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorService>::query(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = QuerySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/VectorService/Update" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateSvc<T: VectorService>(pub Arc<T>);
                    impl<
                        T: VectorService,
                    > tonic::server::UnaryService<super::UpdateRequest>
                    for UpdateSvc<T> {
                        type Response = super::UpdateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorService>::update(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/VectorService/DescribeIndexStats" => {
                    #[allow(non_camel_case_types)]
                    struct DescribeIndexStatsSvc<T: VectorService>(pub Arc<T>);
                    impl<
                        T: VectorService,
                    > tonic::server::UnaryService<super::DescribeIndexStatsRequest>
                    for DescribeIndexStatsSvc<T> {
                        type Response = super::DescribeIndexStatsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DescribeIndexStatsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorService>::describe_index_stats(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DescribeIndexStatsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: VectorService> Clone for VectorServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: VectorService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: VectorService> tonic::server::NamedService for VectorServiceServer<T> {
        const NAME: &'static str = "VectorService";
    }
}
