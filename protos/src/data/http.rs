// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/http.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:google.api.Http)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Http {
    // message fields
    // @@protoc_insertion_point(field:google.api.Http.rules)
    pub rules: ::std::vec::Vec<HttpRule>,
    // @@protoc_insertion_point(field:google.api.Http.fully_decode_reserved_expansion)
    pub fully_decode_reserved_expansion: bool,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Http.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Http {
    fn default() -> &'a Http {
        <Http as ::protobuf::Message>::default_instance()
    }
}

impl Http {
    pub fn new() -> Http {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rules",
            |m: &Http| { &m.rules },
            |m: &mut Http| { &mut m.rules },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fully_decode_reserved_expansion",
            |m: &Http| { &m.fully_decode_reserved_expansion },
            |m: &mut Http| { &mut m.fully_decode_reserved_expansion },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Http>(
            "Http",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Http {
    const NAME: &'static str = "Http";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rules.push(is.read_message()?);
                },
                16 => {
                    self.fully_decode_reserved_expansion = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.fully_decode_reserved_expansion != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rules {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.fully_decode_reserved_expansion != false {
            os.write_bool(2, self.fully_decode_reserved_expansion)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Http {
        Http::new()
    }

    fn clear(&mut self) {
        self.rules.clear();
        self.fully_decode_reserved_expansion = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Http {
        static instance: Http = Http {
            rules: ::std::vec::Vec::new(),
            fully_decode_reserved_expansion: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Http {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Http").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Http {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:google.api.HttpRule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HttpRule {
    // message fields
    // @@protoc_insertion_point(field:google.api.HttpRule.selector)
    pub selector: ::std::string::String,
    // @@protoc_insertion_point(field:google.api.HttpRule.body)
    pub body: ::std::string::String,
    // @@protoc_insertion_point(field:google.api.HttpRule.response_body)
    pub response_body: ::std::string::String,
    // @@protoc_insertion_point(field:google.api.HttpRule.additional_bindings)
    pub additional_bindings: ::std::vec::Vec<HttpRule>,
    // message oneof groups
    pub pattern: ::std::option::Option<http_rule::Pattern>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.HttpRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HttpRule {
    fn default() -> &'a HttpRule {
        <HttpRule as ::protobuf::Message>::default_instance()
    }
}

impl HttpRule {
    pub fn new() -> HttpRule {
        ::std::default::Default::default()
    }

    // string get = 2;

    pub fn get(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Get(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_get(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(http_rule::Pattern::Get(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Get(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> ::std::string::String {
        if self.has_get() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Get(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string put = 3;

    pub fn put(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Put(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_put(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_put(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Put(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_put(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Put(v))
    }

    // Mutable pointer to the field.
    pub fn mut_put(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(http_rule::Pattern::Put(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Put(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Put(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_put(&mut self) -> ::std::string::String {
        if self.has_put() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Put(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string post = 4;

    pub fn post(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Post(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_post(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_post(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Post(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_post(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Post(v))
    }

    // Mutable pointer to the field.
    pub fn mut_post(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(http_rule::Pattern::Post(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Post(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Post(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_post(&mut self) -> ::std::string::String {
        if self.has_post() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Post(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string delete = 5;

    pub fn delete(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Delete(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_delete(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(http_rule::Pattern::Delete(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Delete(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> ::std::string::String {
        if self.has_delete() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Delete(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string patch = 6;

    pub fn patch(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Patch(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_patch(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_patch(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Patch(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_patch(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Patch(v))
    }

    // Mutable pointer to the field.
    pub fn mut_patch(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(http_rule::Pattern::Patch(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Patch(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Patch(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_patch(&mut self) -> ::std::string::String {
        if self.has_patch() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Patch(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.api.CustomHttpPattern custom = 8;

    pub fn custom(&self) -> &CustomHttpPattern {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Custom(ref v)) => v,
            _ => <CustomHttpPattern as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_custom(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_custom(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Custom(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom(&mut self, v: CustomHttpPattern) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Custom(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom(&mut self) -> &mut CustomHttpPattern {
        if let ::std::option::Option::Some(http_rule::Pattern::Custom(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Custom(CustomHttpPattern::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Custom(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom(&mut self) -> CustomHttpPattern {
        if self.has_custom() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Custom(v)) => v,
                _ => panic!(),
            }
        } else {
            CustomHttpPattern::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "selector",
            |m: &HttpRule| { &m.selector },
            |m: &mut HttpRule| { &mut m.selector },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "get",
            HttpRule::has_get,
            HttpRule::get,
            HttpRule::set_get,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "put",
            HttpRule::has_put,
            HttpRule::put,
            HttpRule::set_put,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "post",
            HttpRule::has_post,
            HttpRule::post,
            HttpRule::set_post,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "delete",
            HttpRule::has_delete,
            HttpRule::delete,
            HttpRule::set_delete,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "patch",
            HttpRule::has_patch,
            HttpRule::patch,
            HttpRule::set_patch,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CustomHttpPattern>(
            "custom",
            HttpRule::has_custom,
            HttpRule::custom,
            HttpRule::mut_custom,
            HttpRule::set_custom,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &HttpRule| { &m.body },
            |m: &mut HttpRule| { &mut m.body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "response_body",
            |m: &HttpRule| { &m.response_body },
            |m: &mut HttpRule| { &mut m.response_body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "additional_bindings",
            |m: &HttpRule| { &m.additional_bindings },
            |m: &mut HttpRule| { &mut m.additional_bindings },
        ));
        oneofs.push(http_rule::Pattern::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HttpRule>(
            "HttpRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HttpRule {
    const NAME: &'static str = "HttpRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.selector = is.read_string()?;
                },
                18 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Get(is.read_string()?));
                },
                26 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Put(is.read_string()?));
                },
                34 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Post(is.read_string()?));
                },
                42 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Delete(is.read_string()?));
                },
                50 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Patch(is.read_string()?));
                },
                66 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Custom(is.read_message()?));
                },
                58 => {
                    self.body = is.read_string()?;
                },
                98 => {
                    self.response_body = is.read_string()?;
                },
                90 => {
                    self.additional_bindings.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.body);
        }
        if !self.response_body.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.response_body);
        }
        for value in &self.additional_bindings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.pattern {
            match v {
                &http_rule::Pattern::Get(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &http_rule::Pattern::Put(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &http_rule::Pattern::Post(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &http_rule::Pattern::Delete(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &http_rule::Pattern::Patch(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
                &http_rule::Pattern::Custom(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        if !self.body.is_empty() {
            os.write_string(7, &self.body)?;
        }
        if !self.response_body.is_empty() {
            os.write_string(12, &self.response_body)?;
        }
        for v in &self.additional_bindings {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.pattern {
            match v {
                &http_rule::Pattern::Get(ref v) => {
                    os.write_string(2, v)?;
                },
                &http_rule::Pattern::Put(ref v) => {
                    os.write_string(3, v)?;
                },
                &http_rule::Pattern::Post(ref v) => {
                    os.write_string(4, v)?;
                },
                &http_rule::Pattern::Delete(ref v) => {
                    os.write_string(5, v)?;
                },
                &http_rule::Pattern::Patch(ref v) => {
                    os.write_string(6, v)?;
                },
                &http_rule::Pattern::Custom(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HttpRule {
        HttpRule::new()
    }

    fn clear(&mut self) {
        self.selector.clear();
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.body.clear();
        self.response_body.clear();
        self.additional_bindings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HttpRule {
        static instance: HttpRule = HttpRule {
            selector: ::std::string::String::new(),
            body: ::std::string::String::new(),
            response_body: ::std::string::String::new(),
            additional_bindings: ::std::vec::Vec::new(),
            pattern: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HttpRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HttpRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HttpRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HttpRule`
pub mod http_rule {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:google.api.HttpRule.pattern)
    pub enum Pattern {
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.get)
        Get(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.put)
        Put(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.post)
        Post(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.delete)
        Delete(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.patch)
        Patch(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.custom)
        Custom(super::CustomHttpPattern),
    }

    impl ::protobuf::Oneof for Pattern {
    }

    impl ::protobuf::OneofFull for Pattern {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::HttpRule as ::protobuf::MessageFull>::descriptor().oneof_by_name("pattern").unwrap()).clone()
        }
    }

    impl Pattern {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Pattern>("pattern")
        }
    }
}

// @@protoc_insertion_point(message:google.api.CustomHttpPattern)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CustomHttpPattern {
    // message fields
    // @@protoc_insertion_point(field:google.api.CustomHttpPattern.kind)
    pub kind: ::std::string::String,
    // @@protoc_insertion_point(field:google.api.CustomHttpPattern.path)
    pub path: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.CustomHttpPattern.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CustomHttpPattern {
    fn default() -> &'a CustomHttpPattern {
        <CustomHttpPattern as ::protobuf::Message>::default_instance()
    }
}

impl CustomHttpPattern {
    pub fn new() -> CustomHttpPattern {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "kind",
            |m: &CustomHttpPattern| { &m.kind },
            |m: &mut CustomHttpPattern| { &mut m.kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &CustomHttpPattern| { &m.path },
            |m: &mut CustomHttpPattern| { &mut m.path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CustomHttpPattern>(
            "CustomHttpPattern",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CustomHttpPattern {
    const NAME: &'static str = "CustomHttpPattern";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.kind = is.read_string()?;
                },
                18 => {
                    self.path = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.kind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.kind);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.kind.is_empty() {
            os.write_string(1, &self.kind)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CustomHttpPattern {
        CustomHttpPattern::new()
    }

    fn clear(&mut self) {
        self.kind.clear();
        self.path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CustomHttpPattern {
        static instance: CustomHttpPattern = CustomHttpPattern {
            kind: ::std::string::String::new(),
            path: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CustomHttpPattern {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CustomHttpPattern").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CustomHttpPattern {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomHttpPattern {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15google/api/http.proto\x12\ngoogle.api\"y\n\x04Http\x12*\n\x05rules\
    \x18\x01\x20\x03(\x0b2\x14.google.api.HttpRuleR\x05rules\x12E\n\x1ffully\
    _decode_reserved_expansion\x18\x02\x20\x01(\x08R\x1cfullyDecodeReservedE\
    xpansion\"\xda\x02\n\x08HttpRule\x12\x1a\n\x08selector\x18\x01\x20\x01(\
    \tR\x08selector\x12\x12\n\x03get\x18\x02\x20\x01(\tH\0R\x03get\x12\x12\n\
    \x03put\x18\x03\x20\x01(\tH\0R\x03put\x12\x14\n\x04post\x18\x04\x20\x01(\
    \tH\0R\x04post\x12\x18\n\x06delete\x18\x05\x20\x01(\tH\0R\x06delete\x12\
    \x16\n\x05patch\x18\x06\x20\x01(\tH\0R\x05patch\x127\n\x06custom\x18\x08\
    \x20\x01(\x0b2\x1d.google.api.CustomHttpPatternH\0R\x06custom\x12\x12\n\
    \x04body\x18\x07\x20\x01(\tR\x04body\x12#\n\rresponse_body\x18\x0c\x20\
    \x01(\tR\x0cresponseBody\x12E\n\x13additional_bindings\x18\x0b\x20\x03(\
    \x0b2\x14.google.api.HttpRuleR\x12additionalBindingsB\t\n\x07pattern\";\
    \n\x11CustomHttpPattern\x12\x12\n\x04kind\x18\x01\x20\x01(\tR\x04kind\
    \x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04pathBj\n\x0ecom.google.apiB\tH\
    ttpProtoP\x01ZAgoogle.golang.org/genproto/googleapis/api/annotations;ann\
    otations\xf8\x01\x01\xa2\x02\x04GAPIb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Http::generated_message_descriptor_data());
            messages.push(HttpRule::generated_message_descriptor_data());
            messages.push(CustomHttpPattern::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
