// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/field_behavior.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:google.api.FieldBehavior)
pub enum FieldBehavior {
    // @@protoc_insertion_point(enum_value:google.api.FieldBehavior.FIELD_BEHAVIOR_UNSPECIFIED)
    FIELD_BEHAVIOR_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:google.api.FieldBehavior.OPTIONAL)
    OPTIONAL = 1,
    // @@protoc_insertion_point(enum_value:google.api.FieldBehavior.REQUIRED)
    REQUIRED = 2,
    // @@protoc_insertion_point(enum_value:google.api.FieldBehavior.OUTPUT_ONLY)
    OUTPUT_ONLY = 3,
    // @@protoc_insertion_point(enum_value:google.api.FieldBehavior.INPUT_ONLY)
    INPUT_ONLY = 4,
    // @@protoc_insertion_point(enum_value:google.api.FieldBehavior.IMMUTABLE)
    IMMUTABLE = 5,
    // @@protoc_insertion_point(enum_value:google.api.FieldBehavior.UNORDERED_LIST)
    UNORDERED_LIST = 6,
    // @@protoc_insertion_point(enum_value:google.api.FieldBehavior.NON_EMPTY_DEFAULT)
    NON_EMPTY_DEFAULT = 7,
    // @@protoc_insertion_point(enum_value:google.api.FieldBehavior.IDENTIFIER)
    IDENTIFIER = 8,
}

impl ::protobuf::Enum for FieldBehavior {
    const NAME: &'static str = "FieldBehavior";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FieldBehavior> {
        match value {
            0 => ::std::option::Option::Some(FieldBehavior::FIELD_BEHAVIOR_UNSPECIFIED),
            1 => ::std::option::Option::Some(FieldBehavior::OPTIONAL),
            2 => ::std::option::Option::Some(FieldBehavior::REQUIRED),
            3 => ::std::option::Option::Some(FieldBehavior::OUTPUT_ONLY),
            4 => ::std::option::Option::Some(FieldBehavior::INPUT_ONLY),
            5 => ::std::option::Option::Some(FieldBehavior::IMMUTABLE),
            6 => ::std::option::Option::Some(FieldBehavior::UNORDERED_LIST),
            7 => ::std::option::Option::Some(FieldBehavior::NON_EMPTY_DEFAULT),
            8 => ::std::option::Option::Some(FieldBehavior::IDENTIFIER),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<FieldBehavior> {
        match str {
            "FIELD_BEHAVIOR_UNSPECIFIED" => ::std::option::Option::Some(FieldBehavior::FIELD_BEHAVIOR_UNSPECIFIED),
            "OPTIONAL" => ::std::option::Option::Some(FieldBehavior::OPTIONAL),
            "REQUIRED" => ::std::option::Option::Some(FieldBehavior::REQUIRED),
            "OUTPUT_ONLY" => ::std::option::Option::Some(FieldBehavior::OUTPUT_ONLY),
            "INPUT_ONLY" => ::std::option::Option::Some(FieldBehavior::INPUT_ONLY),
            "IMMUTABLE" => ::std::option::Option::Some(FieldBehavior::IMMUTABLE),
            "UNORDERED_LIST" => ::std::option::Option::Some(FieldBehavior::UNORDERED_LIST),
            "NON_EMPTY_DEFAULT" => ::std::option::Option::Some(FieldBehavior::NON_EMPTY_DEFAULT),
            "IDENTIFIER" => ::std::option::Option::Some(FieldBehavior::IDENTIFIER),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [FieldBehavior] = &[
        FieldBehavior::FIELD_BEHAVIOR_UNSPECIFIED,
        FieldBehavior::OPTIONAL,
        FieldBehavior::REQUIRED,
        FieldBehavior::OUTPUT_ONLY,
        FieldBehavior::INPUT_ONLY,
        FieldBehavior::IMMUTABLE,
        FieldBehavior::UNORDERED_LIST,
        FieldBehavior::NON_EMPTY_DEFAULT,
        FieldBehavior::IDENTIFIER,
    ];
}

impl ::protobuf::EnumFull for FieldBehavior {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("FieldBehavior").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for FieldBehavior {
    fn default() -> Self {
        FieldBehavior::FIELD_BEHAVIOR_UNSPECIFIED
    }
}

impl FieldBehavior {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<FieldBehavior>("FieldBehavior")
    }
}

/// Extension fields
pub mod exts {

    pub const field_behavior: ::protobuf::ext::ExtFieldRepeated<::protobuf::descriptor::FieldOptions, ::protobuf::EnumOrUnknown<super::FieldBehavior>> = ::protobuf::ext::ExtFieldRepeated::new(1052, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_ENUM);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fgoogle/api/field_behavior.proto\x12\ngoogle.api\x1a\x20google/prot\
    obuf/descriptor.proto*\xb6\x01\n\rFieldBehavior\x12\x1e\n\x1aFIELD_BEHAV\
    IOR_UNSPECIFIED\x10\0\x12\x0c\n\x08OPTIONAL\x10\x01\x12\x0c\n\x08REQUIRE\
    D\x10\x02\x12\x0f\n\x0bOUTPUT_ONLY\x10\x03\x12\x0e\n\nINPUT_ONLY\x10\x04\
    \x12\r\n\tIMMUTABLE\x10\x05\x12\x12\n\x0eUNORDERED_LIST\x10\x06\x12\x15\
    \n\x11NON_EMPTY_DEFAULT\x10\x07\x12\x0e\n\nIDENTIFIER\x10\x08:d\n\x0efie\
    ld_behavior\x18\x9c\x08\x20\x03(\x0e2\x19.google.api.FieldBehavior\x12\
    \x1d.google.protobuf.FieldOptionsR\rfieldBehaviorB\x02\x10\0Bp\n\x0ecom.\
    google.apiB\x12FieldBehaviorProtoP\x01ZAgoogle.golang.org/genproto/googl\
    eapis/api/annotations;annotations\xa2\x02\x04GAPIb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(FieldBehavior::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
