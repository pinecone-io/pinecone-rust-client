/*
 * Pinecone Control Plane API
 *
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2024-07
 * Contact: support@pinecone.io
 * Generated by: https://openapi-generator.tech
 */

use crate::openapi::models;
use serde::{Deserialize, Serialize};

/// ErrorResponseError : Detailed information about the error that occurred.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponseError {
    #[serde(rename = "code")]
    pub code: Code,
    #[serde(rename = "message")]
    pub message: String,
    /// Additional information about the error. This field is not guaranteed to be present.
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<serde_json::Value>,
}

impl ErrorResponseError {
    /// Detailed information about the error that occurred.
    pub fn new(code: Code, message: String) -> ErrorResponseError {
        ErrorResponseError {
            code,
            message,
            details: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Code {
    #[serde(rename = "OK")]
    Ok,
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "INVALID_ARGUMENT")]
    InvalidArgument,
    #[serde(rename = "DEADLINE_EXCEEDED")]
    DeadlineExceeded,
    #[serde(rename = "QUOTA_EXCEEDED")]
    QuotaExceeded,
    #[serde(rename = "NOT_FOUND")]
    NotFound,
    #[serde(rename = "ALREADY_EXISTS")]
    AlreadyExists,
    #[serde(rename = "PERMISSION_DENIED")]
    PermissionDenied,
    #[serde(rename = "UNAUTHENTICATED")]
    Unauthenticated,
    #[serde(rename = "RESOURCE_EXHAUSTED")]
    ResourceExhausted,
    #[serde(rename = "FAILED_PRECONDITION")]
    FailedPrecondition,
    #[serde(rename = "ABORTED")]
    Aborted,
    #[serde(rename = "OUT_OF_RANGE")]
    OutOfRange,
    #[serde(rename = "UNIMPLEMENTED")]
    Unimplemented,
    #[serde(rename = "INTERNAL")]
    Internal,
    #[serde(rename = "UNAVAILABLE")]
    Unavailable,
    #[serde(rename = "DATA_LOSS")]
    DataLoss,
    #[serde(rename = "FORBIDDEN")]
    Forbidden,
    #[serde(rename = "UNPROCESSABLE_ENTITY")]
    UnprocessableEntity,
}

impl Default for Code {
    fn default() -> Code {
        Self::Ok
    }
}

